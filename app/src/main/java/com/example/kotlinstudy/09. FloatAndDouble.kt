package com.example.kotlinstudy

fun main(args: Array<String>): Unit {
    println(0.1f + 0.1f + 0.1f) // 결과 : 0.3
    println(0.1f + 0.1f + 0.1f + 0.1f + 0.1f + 0.1f + 0.1f + 0.1f + 0.1f + 0.1f) // 결과 : 1.0000001
    println(0.1f * 10) // 결과 : 1.0
}

/*
    첫번째는 0.3이 출력이 되었다.

    하지만 두번째에서는 0.1f를 10번 더했는데 1.0000001이 출력이 되었다.
    이유는 소숫점을 표현하는 과정에서 2진수로 표현되어 저장이 되는데 2진수로 저장할 때 소숫점이 정확하게
    떨어지지 않는 무한소수가 되기 때문이다.(0.1을 저장하면 근삿값인 0.100000001490116119374765725로 바뀌어서 저장된다고 한다.)
    그렇기 때문에 이런 값이 10이나 누적되어 연산된다면, 오차 또한 10번이 누적되기 때문에 예상 결과와는 달라지게 되는것이다.

    하지만 0.1f를 10번 곱해준 경우에는 연산이 단 1번만 진행되기 때문에 오차도 그만큼 덜 누적되어 결과가 잘 출력이 된 것이다.

    ** 개발 시에 Float형처름 실수형을 사용하게 될 경우 오차가 발생할 수 있는 큰 위험이 따른다.
    그렇기 때문에 실수형을 연산할 경우 오차가 생기는 것을 필연적이며, 대략적인 값만을 얻을 수 있다는 점을 염두해 두고
    코딩해야 한다.(특별한 경우가 아니라면, 정수 타입을 사용하는 것이 좋다)
*/